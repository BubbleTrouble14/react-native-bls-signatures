//All the typescript types of my equivalant bls lib in ts.

export class AugSchemeMPL {
  static skToG1(sk: PrivateKey): G1Element {
    return global.BlsApi.AugSchemeMPL.skToG1(sk);
  }

  static keyGen(seed: Uint8Array): PrivateKey {
    return global.BlsApi.AugSchemeMPL.keyGen(seed);
  }

  static sign(sk: PrivateKey, msg: Uint8Array): G2Element {
    return global.BlsApi.AugSchemeMPL.sign(sk, msg);
  }

  static signPrepend(
    sk: PrivateKey,
    msg: Uint8Array,
    prependPk: G1Element
  ): G2Element {
    return global.BlsApi.AugSchemeMPL.signPrepend(sk, msg, prependPk);
  }

  static verify(pk: G1Element, msg: Uint8Array, sig: G2Element): boolean {
    return global.BlsApi.AugSchemeMPL.verify(pk, msg, sig);
  }

  static aggregate(g2s: G2Element[]): G2Element {
    return global.BlsApi.AugSchemeMPL.aggregate(g2s);
  }

  static aggregateVerify(
    pks: G1Element[],
    msgs: Uint8Array[],
    sig: G2Element
  ): boolean {
    return global.BlsApi.AugSchemeMPL.aggregateVerify(pks, msgs, sig);
  }

  static deriveChildSk(sk: PrivateKey, index: number): PrivateKey {
    return global.BlsApi.AugSchemeMPL.deriveChildSk(sk, index);
  }

  static deriveChildSkUnhardened(sk: PrivateKey, index: number): PrivateKey {
    return global.BlsApi.AugSchemeMPL.deriveChildSkUnhardened(sk, index);
  }

  static deriveChildPkUnhardened(pk: G1Element, index: number): G1Element {
    return global.BlsApi.AugSchemeMPL.deriveChildPkUnhardened(pk, index);
  }
}


export class BasicSchemeMPL {
  static skToG1(sk: PrivateKey): G1Element {
    return global.BlsApi.BasicSchemeMPL.skToG1(sk);
  }

  static keyGen(seed: Uint8Array): PrivateKey {
    return global.BlsApi.BasicSchemeMPL.keyGen(seed);
  }

  static sign(sk: PrivateKey, msg: Uint8Array): G2Element {
    return global.BlsApi.BasicSchemeMPL.sign(sk, msg);
  }

  static verify(pk: G1Element, msg: Uint8Array, sig: G2Element): boolean {
    return global.BlsApi.BasicSchemeMPL.verify(pk, msg, sig);
  }

  static aggregate(g2s: G2Element[]): G2Element {
    return global.BlsApi.BasicSchemeMPL.aggregate(g2s);
  }

  static aggregateVerify(
    pks: G1Element[],
    msgs: Uint8Array[],
    sig: G2Element
  ): boolean {
    return global.BlsApi.BasicSchemeMPL.aggregateVerify(pks, msgs, sig);
  }

  static deriveChildSk(sk: PrivateKey, index: number): PrivateKey {
    return global.BlsApi.BasicSchemeMPL.deriveChildSk(sk, index);
  }

  static deriveChildSkUnhardened(sk: PrivateKey, index: number): PrivateKey {
    return global.BlsApi.BasicSchemeMPL.deriveChildSkUnhardened(sk, index);
  }

  static deriveChildPkUnhardened(pk: G1Element, index: number): G1Element {
    return global.BlsApi.BasicSchemeMPL.deriveChildPkUnhardened(pk, index);
  }
}


export class G1Element implements IBaseG1Element {
  private functionCache: Partial<JsiG1Element>;
  static SIZE: number = 48;

  constructor() {
    this.functionCache = {};
  }

  private getFunctionFromCache<T extends keyof JsiG1Element>(
    functionName: T
  ): JsiG1Element[T] {
    if (this.functionCache[functionName] == null) {
      this.functionCache[functionName] = global.BlsApi.G1Element[functionName];
    }
    return this.functionCache[functionName] as JsiG1Element[T];
  }

  static fromBytes(bytes: Uint8Array): G1Element {
    return global.BlsApi.G1Element.fromBytes(bytes);
  }

  static fromHex(hex: string): G1Element {
    return global.BlsApi.G1Element.fromHex(hex);
  }

  static generator(): G1Element {
    return global.BlsApi.G1Element.generator();
  }

  toBytes(): Uint8Array {
    const func = this.getFunctionFromCache('toBytes');
    return func();
  }

  toHex(): string {
    const func = this.getFunctionFromCache('toHex');
    return func();
  }

  toString(): string {
    const func = this.getFunctionFromCache('toString');
    return func();
  }

  isValid(): boolean {
    const func = this.getFunctionFromCache('isValid');
    return func();
  }

  deepCopy(): G1Element {
    const func = this.getFunctionFromCache('deepCopy');
    return func();
  }

  getFingerprint(): number {
    const func = this.getFunctionFromCache('getFingerprint');
    return func();
  }

  add(g1: G1Element): G1Element {
    const func = this.getFunctionFromCache('add');
    return func(g1);
  }

  negate(): G1Element {
    const func = this.getFunctionFromCache('negate');
    return func();
  }

  equals(g1: G1Element): boolean {
    const func = this.getFunctionFromCache('equals');
    return func(g1);
  }
}


export class G2Element implements IBaseG2Element {
  private functionCache: Partial<JsiG2Element>;
  static SIZE: number = 96;

  constructor() {
    this.functionCache = {};
  }

  private getFunctionFromCache<T extends keyof JsiG2Element>(
    functionName: T
  ): JsiG2Element[T] {
    if (this.functionCache[functionName] == null) {
      this.functionCache[functionName] = global.BlsApi.G2Element[functionName];
    }
    return this.functionCache[functionName] as JsiG2Element[T];
  }

  static fromBytes(bytes: Uint8Array): G2Element {
    return global.BlsApi.G2Element.fromBytes(bytes);
  }

  static fromHex(hex: string): G2Element {
    return global.BlsApi.G2Element.fromHex(hex);
  }

  static generator(): G2Element {
    return global.BlsApi.G2Element.generator();
  }

  toBytes(): Uint8Array {
    const func = this.getFunctionFromCache('toBytes');
    return func();
  }

  toHex(): string {
    const func = this.getFunctionFromCache('toHex');
    return func();
  }

  toString(): string {
    const func = this.getFunctionFromCache('toString');
    return func();
  }

  isValid(): boolean {
    const func = this.getFunctionFromCache('isValid');
    return func();
  }

  deepCopy(): G2Element {
    const func = this.getFunctionFromCache('deepCopy');
    return func();
  }

  add(g2: G2Element): G2Element {
    const func = this.getFunctionFromCache('add');
    return func(g2);
  }

  negate(): G2Element {
    const func = this.getFunctionFromCache('negate');
    return func();
  }

  equals(g2: G2Element): boolean {
    const func = this.getFunctionFromCache('equals');
    return func(g2);
  }
}


export class GTElement implements IBaseGTElement {
  private functionCache: Partial<JsiGTElement>;
  static SIZE = global.BlsApi.GTElement.SIZE;

  constructor() {
    this.functionCache = {};
  }

  private getFunctionFromCache<T extends keyof JsiGTElement>(
    functionName: T
  ): JsiGTElement[T] {
    if (this.functionCache[functionName] == null) {
      this.functionCache[functionName] = global.BlsApi.GTElement[functionName];
    }
    return this.functionCache[functionName] as JsiGTElement[T];
  }

  static fromBytes(bytes: Uint8Array): GTElement {
    return global.BlsApi.GTElement.fromBytes(bytes);
  }

  static fromHex(hex: string): GTElement {
    return global.BlsApi.GTElement.fromHex(hex);
  }

  static unity(): GTElement {
    return global.BlsApi.GTElement.unity();
  }

  toBytes(): Uint8Array {
    const func = this.getFunctionFromCache('toBytes');
    return func();
  }

  toHex(): string {
    const func = this.getFunctionFromCache('toHex');
    return func();
  }

  toString(): string {
    const func = this.getFunctionFromCache('toString');
    return func();
  }

  deepCopy(): GTElement {
    const func = this.getFunctionFromCache('deepCopy');
    return func();
  }

  equals(gT: GTElement): boolean {
    const func = this.getFunctionFromCache('equals');
    return func(gT);
  }
}


export class PopSchemeMPL {
  static skToG1(sk: PrivateKey): G1Element {
    return global.BlsApi.PopSchemeMPL.skToG1(sk);
  }

  static keyGen(seed: Uint8Array): PrivateKey {
    return global.BlsApi.PopSchemeMPL.keyGen(seed);
  }

  static sign(sk: PrivateKey, msg: Uint8Array): G2Element {
    return global.BlsApi.PopSchemeMPL.sign(sk, msg);
  }

  static verify(pk: G1Element, msg: Uint8Array, sig: G2Element): boolean {
    return global.BlsApi.PopSchemeMPL.verify(pk, msg, sig);
  }

  static aggregate(g2s: G2Element[]): G2Element {
    return global.BlsApi.PopSchemeMPL.aggregate(g2s);
  }

  static aggregateVerify(
    pks: G1Element[],
    msgs: Uint8Array[],
    sig: G2Element
  ): boolean {
    return global.BlsApi.PopSchemeMPL.aggregateVerify(pks, msgs, sig);
  }

  static deriveChildSk(sk: PrivateKey, index: number): PrivateKey {
    return global.BlsApi.PopSchemeMPL.deriveChildSk(sk, index);
  }

  static deriveChildSkUnhardened(sk: PrivateKey, index: number): PrivateKey {
    return global.BlsApi.PopSchemeMPL.deriveChildSkUnhardened(sk, index);
  }

  static deriveChildPkUnhardened(pk: G1Element, index: number): G1Element {
    return global.BlsApi.PopSchemeMPL.deriveChildPkUnhardened(pk, index);
  }

  static popVerify(pk: G1Element, signatureProof: G2Element): boolean {
    return global.BlsApi.PopSchemeMPL.popVerify(pk, signatureProof);
  }

  static popProve(sk: PrivateKey): G2Element {
    return global.BlsApi.PopSchemeMPL.popProve(sk);
  }

  static fastAggregateVerify(
    pks: G1Element[],
    msg: Uint8Array,
    sig: G2Element
  ): boolean {
    return global.BlsApi.PopSchemeMPL.fastAggregateVerify(pks, msg, sig);
  }
}


export class PrivateKey implements IBasePrivateKey {
  private functionCache: Partial<JsiPrivateKey>;
  static SIZE: number = 32;

  constructor() {
    this.functionCache = {};
  }

  static fromBytes(bytes: Uint8Array, modOrder?: boolean): PrivateKey {
    return global.BlsApi.PrivateKey.fromBytes(bytes, modOrder ?? false);
  }

  static fromHex(hex: string): PrivateKey {
    return global.BlsApi.PrivateKey.fromHex(hex);
  }

  static aggregate(privateKeys: PrivateKey[]): PrivateKey {
    return global.BlsApi.PrivateKey.aggregate(privateKeys);
  }

  private getFunctionFromCache<T extends keyof JsiPrivateKey>(
    functionName: T
  ): JsiPrivateKey[T] {
    if (this.functionCache[functionName] == null) {
      this.functionCache[functionName] = global.BlsApi.PrivateKey[functionName];
    }
    return this.functionCache[functionName] as JsiPrivateKey[T];
  }

  toBytes(): Uint8Array {
    const func = this.getFunctionFromCache('toBytes');
    return func.bind(this)();
  }

  toHex(): string {
    const func = this.getFunctionFromCache('toHex');
    return func.bind(this)();
  }

  toString(): string {
    const func = this.getFunctionFromCache('toString');
    return func.bind(this)();
  }

  deepCopy(): PrivateKey {
    const func = this.getFunctionFromCache('deepCopy');
    return func.bind(this)();
  }

  equals(sk: PrivateKey): boolean {
    const func = this.getFunctionFromCache('equals');
    return func.bind(this)(sk);
  }

  isZero(): boolean {
    const func = this.getFunctionFromCache('isZero');
    return func.bind(this)();
  }

  getG1(): G1Element {
    const func = this.getFunctionFromCache('getG1');
    return func.bind(this)();
  }

  getG2(): G2Element {
    const func = this.getFunctionFromCache('getG2');
    return func.bind(this)();
  }

  getG2Power(el: G2Element): G2Element {
    const func = this.getFunctionFromCache('getG2Power');
    return func.bind(this)(el);
  }

  mulG1(el: G1Element): G1Element {
    const func = this.getFunctionFromCache('mulG1');
    return func.bind(this)(el);
  }

  mulG2(el: G2Element): G2Element {
    const func = this.getFunctionFromCache('mulG2');
    return func.bind(this)(el);
  }
}


export const hash256 = (msg: Uint8Array): Uint8Array => {
  return global.BlsApi.hash256(msg);
};

export const toHex = (bytes: Uint8Array): string => {
  return global.BlsApi.toHex(bytes);
};

export const fromHex = (hex: string): Uint8Array => {
  return global.BlsApi.fromHex(hex);
};

export const getRandomSeed = (): Uint8Array => {
  return global.BlsApi.getRandomSeed();
};
